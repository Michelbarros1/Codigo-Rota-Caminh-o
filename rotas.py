import networkx as nx

G = nx.Graph()

# Conex√µes simuladas entre os centros de distribui√ß√£o das 5 regi√µes brasileiras a as capitais dos estados, com tempo de viagem estimado (em horas)

caminhos = [
    ("Bel√©m","Manaus",18),
    ("Bel√©m","Rio Branco", 48),
    ("Bel√©m","Porto Velho", 40),
    ("Bel√©m","Boa Vista", 22),
    ("Bel√©m","Macap√°", 6),
    ("Bel√©m","Palmas", 32),

    ("Recife","S√£o Lu√≠s", 48),
    ("Recife","Teresina", 42),
    ("Recife","Fortaleza", 22),
    ("Recife","Natal", 8),
    ("Recife","Jo√£o Pessoa", 4),
    ("Recife", "Macei√≥", 5),
    ("Recife", "Aracaju", 10),
    ("Recife", "Salvador", 16),

    ("Bras√≠lia","Goiania", 5),
    ("Bras√≠lia","Cuiab√°", 9),
    ("Bras√≠lia", "Campo Grande", 12),

    ("S√£o Paulo","Belo Horizonte", 8),
    ("S√£o Paulo","Rio de Janeiro", 4),
    ("S√£o Paulo","Vit√≥ria", 14),

    ("Florian√≥polis","Curitiba", 6),
    ("Florian√≥polis","Porto Alegre", 12),
]

G.add_weighted_edges_from(caminhos)

centros = ["Bel√©m", "Recife", "Bras√≠lia", "S√£o Paulo", "Florian√≥polis"]

# Pricipais Clientes e Demandas 
clientes = {
    "ExpressoAmazonasLDTA(AM)": 170,
    "Solu√ß√µes_BaianasBR(BA)": 350,
    "MetaisFederais(GO)": 279,
    "BRAZILEXPRESS(SP)": 568,
    "Funda√ß√£oSigmaBrasil": 450,
    "Companhia Nacional de Alimentos(CNA)": 599,
    "Funda√ß√£oHuszAnthony(SC)": 666,
    "TransportesIrm√£osMontero": 890,
    "LojasMarajoara(RO)": 355,
    "Companhia Metropolitana de S√£o Paulo": 269,
    "MAXTITANIUM ltda": 958,

}

G.add_weighted_edges_from([
    ("ExpressoAmazonasLDTA(AM)", "Bel√©m", 12),
    ("Solu√ß√µes_BaianasBR(BA)", "Recife", 8),
    ("BRAZILEXPRESS(SP)", "S√£o Paulo", 6),
    ("Funda√ß√£oHuszAnthony(SC)","Florian√≥polis", 5),
    ("MetaisFederais(GO)", "Bras√≠lia", 10),
    ("Funda√ß√£oSigmaBrasil", "Rio de Janeiro", 4),
    ("Companhia Nacional de Alimentos(CNA)", "Curitiba", 6),
    ("TransportesIrm√£osMontero","Rio Branco", 2),
    ("LojasMarajaora(RO)", "Porto Velho", 2),
    ("MAXTITANIUM ltda","Porto Alegre", 8 ),
])

#  Par√¢metros do caminh√£o 
capacidade_max = 600  # kg
tempo_max = 40        # horas


def centro_mais_proximo(destino):
    tempos = []
    for centro in centros:
        try:
            tempo = nx.dijkstra_path_length(G, centro, destino)
            tempos.append((centro, tempo))
        except nx.NetworkXNoPath:
            continue
    return min(tempos, key=lambda x: x[1]) if tempos else (None, float('inf'))
print("OL√Å, SEJA BEM VINDO (A) AQUI EST√Å AS INFORMA√á√ïES NECESS√ÅRIAS PARA O RELAT√ìRIO EMPRESARIAL:")

def simular_entregas():
    for cliente, demanda in clientes.items():
        print(f"\nüì¶ Cliente: {cliente} | Demanda: {demanda} kg")

        if demanda > capacidade_max:
            print(f"‚ùå Excede a capacidade do caminh√£o ({demanda} > {capacidade_max})")
            continue

        centro, tempo = centro_mais_proximo(cliente)
        if not centro:
            print("‚ùå Nenhum centro acess√≠vel")
            continue

        if tempo > tempo_max:
            print(f"‚ùå Tempo excedido ({tempo} > {tempo_max})")
            continue

        caminho = nx.dijkstra_path(G, centro, cliente)
        print(f"‚úÖ Entrega poss√≠vel!")
        print(f"üöö Centro de sa√≠da: {centro}")
        print(f"üõ£Ô∏è Rota: {' -> '.join(caminho)}")
        print(f"‚è±Ô∏è Tempo estimado: {tempo}h")

if __name__ == "__main__":
    simular_entregas()
print("AS CINCO ROTAS ACIMA EST√ÉO INCORRETAS, VERIFIQUE COM O CLIENTE O VOLUME DA CARGA OU O CENTRO DE DISTRIBUI√á√ÉO! ")